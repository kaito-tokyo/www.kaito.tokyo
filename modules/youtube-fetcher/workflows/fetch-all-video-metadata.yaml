- CalculateCachedResponsePrefix:
    assign:
      - today: '${text.split(time.format(sys.now()), "T")[0]}'
      - cachedReponsePrefix: '${format("%s/youtube-list-search-all/%s", channelId, today)}'
- CheckIfCachedSearchListExists:
    call: "googleapis.storage.v1.objects.list"
    args:
      bucket: "${cacheBucketName}"
      matchGlob: '${format("%s-*.json", cachedReponsePrefix)}'
    result: "cachedResponseExists"
- DetermineIfRequestSearchList:
    switch:
      - condition: '${"items" in cachedResponseExists}'
        next: "GetAllSearchLists"
    next: "PrepareForIterateAllPages"
- PrepareForIterateAllPages:
    assign:
      - pageToken: ""
      - lastIndex: 0
- IterateForAllPages:
    for:
      value: "i"
      range: [0, 1]
      steps:
        - RequestSearchList:
          call: "http.get"
          args:
            url: "https://asia-east1-www-kaito-tokyo.cloudfunctions.net/youtube-list-search"
            query:
              channelId: "${channelId}"
              pageToken: "${pageToken}"
            auth:
              type: "OIDC"
          result: "requestedSearchList"
        - SaveSearchList:
            call: "googleapis.storage.v1.objects.insert"
            args:
              bucket: "${cacheBucketName}"
              uploadType: "media"
              name: '${format("%s-%d.json", cachedReponsePrefix, i)}'
              body: "${requestedSearchList}"
        - DetermineHasNextPage:
            switch:
              condition: '${not ("nextPageToken" in requestedSearchList)}'
              next: "break"
            next: "SetNextPageToken"
        - SetNextPageTokenAndLastIndex:
            assign:
              - pageToken: "${requestedSearchList.nextPageToken}"
              - lastIndex: "${i}"
- GetAllSearchLists:
  call: "googleapis.storage.v1.objects.list"
  args:
    bucket: "${cacheBucketName}"
    matchGlob: '${format("%s-*.json", cachedReponsePrefix)}'
  result: "cachedSearchLists"           
- IterateForAllSearchLists:
    return: "${cachedSearchLists}"