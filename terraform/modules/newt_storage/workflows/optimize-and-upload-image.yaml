main:
  params:
    - args
  steps:
    - SetConstants:
        assign:
          - endpoints: '${json.decode(sys.get_env("ENDPOINTS"))}'
          - bucket: "${args.data.bucket}"

    - SplitPathComponents:
        assign:
          - pathComponents: '${text.split(args.data.name, "/")}'

    - DetermineIfPathIsDefaultImage:
        switch:
          - condition: "${len(pathComponents) == 2}"
            next: "ExtractObjectName"
        next: "ReturnBecauseObjectIsNotDefaultImage"

    - ReturnBecauseObjectIsNotDefaultImage:
        return: '${"Skipping" + args.data.name + "!"}'

    - ExtractObjectName:
        assign:
          - object: "${args.data.name}"

    - OptimizeImage:
        call: "http.get"
        args:
          url: "${endpoints.optimizeImage}"
          query:
            inputBucket: "${bucket}"
            inputObject: "${object}"
            outputBucket: "${bucket}"
          auth:
            type: "OIDC"
        result: "optimizeImageResult"

    - IterateForOptimizedImages:
        for:
          value: "uploadingObjectName"
          in: "${optimizeImageResult.body.outputObjects}"
          steps:
            - LogUploadingObjectName:
                call: sys.log
                args:
                  text: "${uploadingObjectName}"

            - UploadObjectToCdn:
                call: "http.get"
                args:
                  url: "${endpoints.uploadObjectToCdn}"
                  query:
                    inputBucket: "${bucket}"
                    inputObject: "${uploadingObjectName}"
                    outputObject: "${uploadingObjectName}"
                  auth:
                    type: "OIDC"
