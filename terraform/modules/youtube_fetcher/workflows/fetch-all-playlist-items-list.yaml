- SetConstants:
    assign:
      - endpoints: '${json.decode(sys.get_env("ENDPOINTS"))}'
      - buckets: '${json.decode(sys.get_env("BUCKETS"))}'
      - playlistIds: '${json.decode(sys.get_env("PLAYLIST_IDS"))}'
      - today: '${text.split(time.format(sys.now()), "T")[0]}'
      - publicObject: '${"playlist/" + today + ".json"}'

- IterateForAllPlaylistIds:
    for:
      value: "playlistId"
      in: "${playlistIds}"
      steps:
        - DeclareNextPageToken:
            assign:
              - nextPageToken: ""

        - IterateForAllPages:
            for:
              value: "i"
              range: [0, 10]
              steps:
                - SavePlaylistItemsList:
                    call: "http.get"
                    args:
                      url: "${endpoints.savePlaylistItemsList}"
                      query:
                        playlistId: "${playlistId}"
                        outputBucket: "${buckets.cache}"
                        outputObject: '${"save-playlist-items-list/" + today + "/" + playlistId + " " + text.substring("000" + i, -3, -1) + ".json"}'
                        pageToken: "${nextPageToken}"
                      auth:
                        type: "OIDC"
                    result: "savePlaylistItemsListResponse"

                - DetermineHasNextPage:
                    switch:
                      - condition: "${savePlaylistItemsListResponse.code == 204}"
                        next: "break"
                      - condition: '${"nextPageToken" in savePlaylistItemsListResponse.body}'
                        next: "SetNextPageToken"
                    next: "break"

                - SetNextPageToken:
                    assign:
                      - nextPageToken: "${savePlaylistItemsListResponse.body.nextPageToken}"

- ComposePlaylistItemsList:
    call: "http.get"
    args:
      url: "${endpoints.composePlaylistItemsList}"
      query:
        inputBucket: "${buckets.cache}"
        inputMatchGlob: '${"save-playlist-items-list/" + today + "/*.json"}'
        outputBucket: "${buckets.public}"
        outputObject: '${"playlists/" + today + ".json"}'
      auth:
        type: "OIDC"
    result: "composePlaylistItemsListResponse"
