- SetGlobalConstants:
    assign:
      - endpoints: '${json.decode(sys.get_env("ENDPOINTS"))}'
      - buckets: '${json.decode(sys.get_env("BUCKETS"))}'
      - channelIds: '${json.decode(sys.get_env("CHANNEL_IDS"))}'
      - today: '${text.split(time.format(sys.now()), "T")[0]}'

- IterateForAllChannelIds:
    for:
      value: "channelId"
      in: "${channelIds}"
      steps:
        - ResetNextPageToken:
            assign:
              - nextPageToken: ""

        - IterateForAllPages:
            for:
              value: "i"
              range: [0, 10]
              steps:
                - SaveSearchList:
                    call: "http.get"
                    args:
                      url: "${endpoints.saveSearchList}"
                      query:
                        channelId: "${channelId}"
                        outputBucket: "${buckets.cache}"
                        outputObject: '${"save-search-list-all/" + today + "/" + channelId + " " + text.substring("000" + i, -3, 6) + ".json"}'
                        pageToken: "${nextPageToken}"
                      auth:
                        type: "OIDC"
                    result: "saveSearchListResponse"

                - DetermineHasNextPage:
                    switch:
                      - condition: "${saveSearchListResponse.code == 204}"
                        next: "break"
                      - condition: '${"nextPageToken" in saveSearchListResponse.body}'
                        next: "SetNextPageToken"
                    next: "break"

                - SetNextPageToken:
                    assign:
                      - nextPageToken: "${saveSearchListResponse.body.nextPageToken}"

        - GetAllSearchListCache:
            call: "googleapis.storage.v1.objects.list"
            args:
              bucket: "${buckets.cache}"
              matchGlob: '${"save-search-list-all/" + today + "/" + channelId + " *.json"}'
            result: "getAllSearchListCacheResponse"

        - IterateForAllSearchListCache:
            for:
              value: "object"
              in: "${getAllSearchListCacheResponse.items}"
              steps:
                - SplitSearchList:
                    call: "http.get"
                    args:
                      url: "${endpoints.splitSearchList}"
                      query:
                        inputBucket: "${buckets.cache}"
                        inputObject: "${object.name}"
                        outputBucket: "${buckets.metadata}"
                        outputDirectory: '${"search/" + channelId}'
                      auth:
                        type: "OIDC"
