- SetConstants:
    assign:
      - endpoints: '${json.decode(sys.get_env("ENDPOINTS"))}'
      - buckets: '${json.decode(sys.get_env("BUCKETS"))}'
      - channelIds: '${json.decode(sys.get_env("CHANNEL_ID")}'
      - cacheBucketName: '${sys.get_env("CACHE_BUCKET_NAME")}'
      - today: '${text.split(time.format(sys.now()), "T")[0]}'

- IterateForAllPlaylistIds:
    for:
      value: "channelId"
      in: "${channelIds}"
      steps:
        - GetVideoListQueries:
            call: "http.get"
            args:
              url: "${endpoints.generateVideoListQueries}"
              query:
                bucket: "${buckets.metadata}"
                matchGlob: '${"/search/*.json"}'
                itemsPerRequest: 50
              auth:
                type: "OIDC"
            result: "videoListQueries"

        - IterateForAllVideoListQueries:
            for:
              value: "query"
              in: "${videoListQueries.body}"
              steps:
                - GetQueryHash:
                    call: "http.post"
                    args:
                      url: "${endpoints.digest}"
                      headers:
                        "Content-Type": "application/json"
                      body: "${query}"
                      auth:
                        type: "OIDC"
                    result: "queryHash"
                - AssignCachedVideoListName:
                    assign:
                      - cachedVideoListName: '${"/" + queryHash.body + ".json"}'
                - SaveVideoList:
                    call: "http.post"
                    args:
                      url: "${endpoints.saveVideoList}"
                      headers:
                        "Content-Type": "application/json"
                      body:
                        id: "${query.id}"
                        bucket: "${cacheBucketName}"
                        object: "${cachedVideoListName}"
                      auth:
                        type: "OIDC"
                - SplitVideoList:
                    call: "http.get"
                    args:
                      url: "${endpoints.splitVideoList}"
                      query:
                        inputBucket: "${cacheBucketName}"
                        inputObject: "${cachedVideoListName}"
                        outputBucket: "${metadataBucketName}"
                        outputDirectory: "${metadataVideoListPrefix}"
                      auth:
                        type: "OIDC"
- ComposeVideoList:
    call: "http.get"
    args:
      url: "${endpoints.composeVideoList}"
      query:
        inputBucket: "${metadataBucketName}"
        inputPrefix: "${metadataVideoListPrefix}"
        outputBucket: "${publicBucketName}"
        outputObject: "${publicVideoListName}"
      auth:
        type: "OIDC"
    result: "composedVideoList"
- UpdatePublicVideoListIndexMedia:
    call: "googleapis.storage.v1.objects.insert"
    args:
      bucket: "${publicBucketName}"
      uploadType: "media"
      name: "${publicVideoIndexName}"
      body:
        url: "${composedVideoList.body.outputUrl}"
- UpdatePublicVideoListIndexMetadata:
    call: "googleapis.storage.v1.objects.patch"
    args:
      bucket: "${publicBucketName}"
      object: "${text.url_encode(publicVideoIndexName)}"
      body:
        cacheControl: "public, max-age=60"
