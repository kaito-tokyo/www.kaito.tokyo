- SetGlobalConstants:
    assign:
      - endpoints: '${json.decode(sys.get_env("ENDPOINTS"))}'
      - buckets: '${json.decode(sys.get_env("BUCKETS"))}'
      - channelIds: '${json.decode(sys.get_env("CHANNEL_ID"))}'
      - cacheBucketName: '${sys.get_env("CACHE_BUCKET_NAME")}'
      - today: '${text.split(time.format(sys.now()), "T")[0]}'

- IterateForAllChannelIds:
    for:
      value: "channelId"
      in: "${channelIds}"
      steps:
        - GetVideoListQueries:
            call: "http.get"
            args:
              url: "${endpoints.generateVideoListQueries}"
              query:
                inputBucket: "${buckets.metadata}"
                inputMatchGlob: '${"search/" + channelId + "/*.json"}'
                itemsPerRequest: 50
              auth:
                type: "OIDC"
            result: "getVideoListQueriesResponse"

        - IterateForAllVideoListQueries:
            for:
              value: "query"
              in: "${getVideoListQueriesResponse.body}"
              steps:
                - GetQueryHash:
                    call: "http.post"
                    args:
                      url: "${endpoints.digest}"
                      headers:
                        "Content-Type": "application/json"
                      body: "${query}"
                      auth:
                        type: "OIDC"
                    result: "getQueryHashResponse"

                - AssignCachedVideoListName:
                    assign:
                      - cachedVideoListName: '${"/" + queryHash.body + ".json"}'

                - SaveVideoList:
                    call: "http.post"
                    args:
                      url: "${endpoints.saveVideoList}"
                      headers:
                        "Content-Type": "application/json"
                      body:
                        id: "${query.id}"
                        bucket: "${buckets.cache}"
                        object: '${"save-video-list-all/" + today + "/" + channelId + ".json"}'
                      auth:
                        type: "OIDC"

                - SplitVideoList:
                    call: "http.get"
                    args:
                      url: "${endpoints.splitVideoList}"
                      query:
                        inputBucket: "${buckets.cache}"
                        inputObject: "${cachedVideoListName}"
                        outputBucket: "${buckets.metadata}"
                        outputDirectory: '${"videos/" + channelId}'
                      auth:
                        type: "OIDC"

        - ComposeVideoList:
            call: "http.get"
            args:
              url: "${endpoints.composeVideoList}"
              query:
                inputBucket: "${buckets.metadata}"
                inputPrefix: '${"videos/" + channelId}'
                outputBucket: "${buckets.public}"
                outputObject: "${"videos/" + channelId + ".json}"
              auth:
                type: "OIDC"
            result: "composeVideoListResponse"

# - UpdatePublicVideoListIndexMedia:
#     call: "googleapis.storage.v1.objects.insert"
#     args:
#       bucket: "${buckets.public}"
#       uploadType: "media"
#       name: "${publicVideoIndexName}"
#       body:
#         url: "${composedVideoList.body.outputUrl}"

# - UpdatePublicVideoListIndexMetadata:
#     call: "googleapis.storage.v1.objects.patch"
#     args:
#       bucket: "${buckets.public}"
#       object: "${text.url_encode(publicVideoIndexName)}"
#       body:
#         cacheControl: "public, max-age=60"
